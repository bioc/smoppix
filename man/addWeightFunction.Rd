% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addWeightFunction.R
\name{addWeightFunction}
\alias{addWeightFunction}
\title{Build a weighting function based on the data}
\usage{
addWeightFunction(
  resList,
  pis = resList$pis,
  designVars,
  lowestLevelVar,
  maxObs = 1e+05,
  maxFeatures = 500,
  ...
)
}
\arguments{
\item{resList}{A results list, from a call to estPims()}

\item{pis}{The PIs for which weighting functions are constructed}

\item{designVars}{A character vector containing all design factors
(both fixed and random), that are also present as variables in hypFrame}

\item{lowestLevelVar}{The design variable at the lowest level of nesting,
often separating technical replicates. The conditional variance is calculated
within the groups of PIs defined by this variable}

\item{maxObs, maxFeatures}{The maximum number of observations respectively
features for fitting the weighting function. See details}

\item{...}{Additional arguments passed on to the scam::scam function}
}
\value{
A fitted scam object, which can be used to
}
\description{
Build a weighting function based on the data
}
\details{
For computational and memory reasons,
 for large datasets the trend fitting
is restricted to a subset of the data through the maxObs and maxFeatures
parameters.
Provide either 'designVars' or 'lowestLevelVar'. In the latter case, the
design variables are set to all imageVars in the hypFrame object except
lowestLevelVar. When the PI is calculated on the cell level,
this the lowest nesting level so inputs will be ignored for these PIs

The scam functions fits a decreasing spline of the variance as a
 function of the number of observations
}
\examples{
data(Yang)
hypYang <- buildHyperFrame(Yang,
    coordVars = c("x", "y"),
    imageVars = c("day", "root", "section")
)
# Fit a subset of features to limit computation time
yangPims <- estPims(hypYang[c(seq_len(5), seq(25, 29)),],
    pis = c("nn", "nnPair")
)
# Build the weighting function for all PIs present
yangObj <- addWeightFunction(yangPims, designVars = c("day", "root"))
# Alternative formulation with 'lowestLevelVar'
yangObj2 <- addWeightFunction(yangPims,
    lowestLevelVar = "section",
    pi = "nn"
)
}
\seealso{
\link{buildDfMM}
}
